{
  "name": "full-calendar",
  "dependencies": [],
  "registryDependencies": [
    "utils",
    "dialog",
    "button",
    "toggle-group",
    "tooltip",
    "hover-card"
  ],
  "files": [
    {
      "name": "Calendar.vue",
      "content": "<script lang=\"ts\" setup>\nimport { type HTMLAttributes, computed, ref } from 'vue'\nimport { CalendarRoot, type CalendarRootEmits, type CalendarRootProps, useForwardPropsEmits } from 'radix-vue'\nimport { useCalendarEvents } from './useCalendarEvents'\nimport { CalendarActions, CalendarCell, CalendarCellEvent, CalendarCellEvents, CalendarCellTrigger, type CalendarEvent, CalendarGrid, CalendarGridBody, CalendarGridHead, CalendarGridRow, CalendarHeadCell, CalendarHeader, CalendarHeading, CalendarNextButton, CalendarPrevButton } from '.'\nimport { cn } from '@/lib/utils'\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/lib/registry/new-york/ui/dialog'\n\nconst props = defineProps<CalendarRootProps & { class?: HTMLAttributes['class'], events: CalendarEvent[] }>()\n\nconst emits = defineEmits<CalendarRootEmits & {\n  more: [events: CalendarEvent[]]\n  eventClick: [event: CalendarEvent]\n  eventHover: [event: CalendarEvent]\n  cellClick: [date: string]\n  cellHover: [date: string]\n}>()\n\nconst delegatedProps = computed(() => {\n  const { class: _, ...delegated } = props\n\n  return delegated\n})\n\nconst forwarded = useForwardPropsEmits(delegatedProps, emits)\n\nconst { getEventsByDate } = useCalendarEvents(props.events)\n\n// SHOW MORE\nconst activeEvents = ref<CalendarEvent[]>([])\n\nconst moreDialog = ref(false)\n\nfunction onShowAllEvent(events: CalendarEvent[]) {\n  activeEvents.value = events\n  moreDialog.value = true\n}\n\n// VIEW EVENTS\nconst activeEvent = ref<CalendarEvent | null>(null)\nconst viewDialog = ref(false)\n\nfunction onEventClick(event: CalendarEvent) {\n  activeEvent.value = event\n  viewDialog.value = true\n  emits('eventClick', event)\n}\n\n// CELL CLICK\nfunction onCellClick(date: string) {\n  emits('cellClick', date)\n}\n\n// VIEW MODE\nconst viewMode = ref<'month' | 'week' | 'list'>('month')\n\n// MONTH MODEL VALUE\n// const month = defineModel('month')\n</script>\n\n<template>\n  <CalendarRoot\n    v-slot=\"{ grid, weekDays }\" :class=\"cn('p-3 flex flex-col justify-start items-stretch', props.class)\"\n    v-bind=\"forwarded\"\n  >\n    <div class=\"flex flex-row justify-between items-start\">\n      <CalendarHeader class=\"w-fit gap-1\">\n        <CalendarPrevButton />\n        <CalendarHeading />\n        <CalendarNextButton />\n      </CalendarHeader>\n      <div class=\"flex flex-row justify-end items-start gap-1\">\n        <CalendarActions v-model:mode=\"viewMode\">\n          <template #actions>\n            <slot name=\"actions\" />\n          </template>\n        </CalendarActions>\n      </div>\n    </div>\n\n    <div v-if=\"viewMode === 'month'\" class=\"flex flex-grow flex-col gap-y-4 mt-4 sm:flex-row sm:gap-x-4 sm:gap-y-0\">\n      <CalendarGrid v-for=\"month in grid\" :key=\"month.value.toString()\">\n        <CalendarGridHead>\n          <CalendarGridRow class=\"grid grid-cols-7\">\n            <CalendarHeadCell v-for=\"day in weekDays\" :key=\"day\" class=\"col-span-1 first-of-type:rounded-tl-lg last-of-type:rounded-tr-lg\">\n              {{ day }}\n            </CalendarHeadCell>\n          </CalendarGridRow>\n        </CalendarGridHead>\n        <CalendarGridBody>\n          <CalendarGridRow\n            v-for=\"(weekDates, index) in month.rows\" :key=\"`weekDate-${index}`\"\n            class=\"w-full grid grid-cols-7\"\n          >\n            <CalendarCell v-for=\"weekDate in weekDates\" :key=\"weekDate.toString()\" :date=\"weekDate\" class=\"col-span-1\" :class=\"{ ' first-of-type:rounded-bl-lg last-of-type:rounded-br-lg': index === month.rows?.length - 1 }\" @click=\"onCellClick(weekDate.toString())\">\n              <slot name=\"cell\">\n                <CalendarCellTrigger :day=\"weekDate\" :month=\"month.value\" />\n                <CalendarCellEvents v-if=\"getEventsByDate(weekDate.toString())?.length > 0\" :events=\"getEventsByDate(weekDate.toString())\" name=\"events\" @more=\"onShowAllEvent\" @event-click=\"onEventClick\">\n                  <slot name=\"events\" :events=\"events\" />\n                  <template #tooltip=\"{ event }\">\n                    <slot name=\"tooltip\" :event=\"event\" />\n                  </template>\n                  <template #event=\"{ event }\">\n                    <slot name=\"event\" :event=\"event\" />\n                  </template>\n                </CalendarCellEvents>\n              </slot>\n            </CalendarCell>\n          </CalendarGridRow>\n        </CalendarGridBody>\n      </CalendarGrid>\n    </div>\n    <div v-else-if=\"viewMode === 'list'\" class=\"flex flex-grow flex-col gap-y-4 mt-4 sm:flex-row sm:gap-x-4 sm:gap-y-0\">\n      <CalendarGrid v-for=\"month in grid\" :key=\"month.value.toString()\">\n        <CalendarGridBody>\n          <CalendarGridRow\n            v-for=\"(weekDates, index) in month.rows\" :key=\"`weekDate-${index}`\"\n            class=\"w-full grid grid-cols-7\"\n          >\n            <CalendarCell v-for=\"weekDate in weekDates\" :key=\"weekDate.toString()\" :date=\"weekDate\" class=\"col-span-7\" :class=\"{ 'first-of-type:rounded-t-lg': index === 0, 'last-of-type:rounded-b-lg': index === month.rows?.length - 1 }\" content-class=\"min-h-fit flex flex-row justify-start items-start\" @click=\"onCellClick(weekDate.toString())\">\n              <slot name=\"cell\">\n                <CalendarCellTrigger :day=\"weekDate\" :month=\"month.value\" />\n                <CalendarCellEvents v-if=\"getEventsByDate(weekDate.toString())?.length > 0\" :events=\"getEventsByDate(weekDate.toString())\" name=\"events\" @more=\"onShowAllEvent\" @event-click=\"onEventClick\">\n                  <slot name=\"events\" :events=\"events\" />\n                  <template #tooltip=\"{ event }\">\n                    <slot name=\"tooltip\" :event=\"event\" />\n                  </template>\n                  <template #event=\"{ event }\">\n                    <slot name=\"event\" :event=\"event\" />\n                  </template>\n                </CalendarCellEvents>\n              </slot>\n            </CalendarCell>\n          </CalendarGridRow>\n        </CalendarGridBody>\n      </CalendarGrid>\n    </div>\n  </CalendarRoot>\n  <Dialog v-model:open=\"moreDialog\">\n    <DialogContent class=\"sm:max-w-[425px]\">\n      <DialogHeader>\n        <DialogTitle>Events</DialogTitle>\n        <DialogDescription>\n          List of events in {{ activeEvents[0]?.date }}\n        </DialogDescription>\n      </DialogHeader>\n      <div>\n        <CalendarCellEvents :events=\"activeEvents\" :hover=\"false\" :is-display-all=\"true\" />\n      </div>\n    </DialogContent>\n  </Dialog>\n  <Dialog v-model:open=\"viewDialog\">\n    <DialogContent class=\"sm:max-w-[425px]\">\n      <DialogHeader>\n        <DialogTitle>{{ activeEvent?.title }}</DialogTitle>\n        <DialogDescription>\n          {{ activeEvent?.date }}\n        </DialogDescription>\n      </DialogHeader>\n      <div>\n        <CalendarCellEvent :event=\"activeEvent\" />\n      </div>\n    </DialogContent>\n  </Dialog>\n</template>\n"
    },
    {
      "name": "CalendarActions.vue",
      "content": "<script setup lang=\"ts\">\nimport { CalendarDays, CalendarRange, TableProperties } from 'lucide-vue-next'\nimport { Button } from '@/lib/registry/new-york/ui/button'\nimport { ToggleGroup, ToggleGroupItem } from '@/lib/registry/new-york/ui/toggle-group'\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from '@/lib/registry/new-york/ui/tooltip'\n\nconst mode = defineModel('mode', {\n  default: 'month',\n})\n</script>\n\n<template>\n  <div class=\"flex flex-row justify-end items-start gap-1\">\n    <Button size=\"sm\" variant=\"outline\">\n      Today\n    </Button>\n    <ToggleGroup v-model=\"mode\" type=\"single\" size=\"sm\" class=\"h-9 border p-1 rounded-md\">\n      <ToggleGroupItem value=\"month\" aria-label=\"Toggle bold\" class=\"h-7 p-0 border-0\" :class=\"{ 'w-7': mode !== 'month', 'px-2': mode === 'month' }\">\n        <TooltipProvider>\n          <Tooltip>\n            <TooltipTrigger as-child>\n              <CalendarDays class=\"h-4 w-4\" />\n              <span v-if=\"mode === 'month'\" class=\"ml-1\">Month</span>\n            </TooltipTrigger>\n            <TooltipContent>\n              <p>View by month</p>\n            </TooltipContent>\n          </Tooltip>\n        </TooltipProvider>\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"week\" aria-label=\"Toggle italic\" class=\"h-7 p-0 border-0\" :class=\"{ 'w-7': mode !== 'week', 'px-2': mode === 'week' }\">\n        <TooltipProvider>\n          <Tooltip>\n            <TooltipTrigger as-child>\n              <CalendarRange class=\"h-4 w-4\" />\n              <span v-if=\"mode === 'week'\" class=\"ml-1\">Week</span>\n            </TooltipTrigger>\n            <TooltipContent>\n              <p>View by week</p>\n            </TooltipContent>\n          </Tooltip>\n        </TooltipProvider>\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"list\" aria-label=\"Toggle underline\" class=\"h-7  p-0 border-0\" :class=\"{ 'w-7': mode !== 'list', 'px-2': mode === 'list' }\">\n        <TooltipProvider>\n          <Tooltip>\n            <TooltipTrigger as-child>\n              <TableProperties class=\"h-4 w-4\" />\n              <span v-if=\"mode === 'list'\" class=\"ml-1\">List</span>\n            </TooltipTrigger>\n            <TooltipContent>\n              <p>View by list</p>\n            </TooltipContent>\n          </Tooltip>\n        </TooltipProvider>\n      </ToggleGroupItem>\n    </ToggleGroup>\n    <slot name=\"actions\" />\n  </div>\n</template>\n"
    },
    {
      "name": "CalendarCell.vue",
      "content": "<script lang=\"ts\" setup>\nimport { type HTMLAttributes, computed } from 'vue'\nimport { CalendarCell, type CalendarCellProps, useForwardProps } from 'radix-vue'\nimport { cn } from '@/lib/utils'\n\nconst props = defineProps<CalendarCellProps & { class?: HTMLAttributes['class'], contentClass?: HTMLAttributes['class'] }>()\n\nconst delegatedProps = computed(() => {\n  const { class: _, ...delegated } = props\n\n  return delegated\n})\n\nconst forwardedProps = useForwardProps(delegatedProps)\n</script>\n\n<template>\n  <CalendarCell\n    :class=\"cn('border focus-within:relative focus-within:z-20 [&:has([data-selected])]:bg-accent [&:has([data-selected][data-outside-month])]:bg-accent/50', props.class)\"\n    v-bind=\"forwardedProps\"\n  >\n    <div :class=\"cn('min-h-24 flex flex-col justify-start items-start relative h-full w-full p-1 text-center text-sm', props.contentClass) \">\n      <slot />\n    </div>\n  </CalendarCell>\n</template>\n"
    },
    {
      "name": "CalendarCellEvent.vue",
      "content": "<script setup lang=\"ts\">\nimport type { CalendarEventProps } from '.'\nimport { cn } from '@/lib/utils'\n\nconst props = defineProps<CalendarEventProps>()\n</script>\n\n<template>\n  <div :class=\"cn('flex flex-col justify-start items-stretch rounded-sm p-1 text-left text-xs shadow-sm cursor-pointer overflow-hidden hover:shadow', `bg-${props.event?.color}-200 text-${props.event?.color}-500 border-${props.event?.color}-100`, props.event?.backgroundColor, props.event?.backgroundColor, props.event?.textColor)\">\n    <strong class=\"font-bold whitespace-nowrap w-full overflow-hidden text-ellipsis\">{{ props.event?.title }}</strong>\n    <div class=\"text-2xs flex flex-row justify-start items-center gap-1 w-full overflow-hidden text-ellipsis\">\n      <span>{{ props.event?.start }}</span>\n      <span>~</span>\n      <span>{{ props.event?.end }}</span>\n    </div>\n  </div>\n</template>\n"
    },
    {
      "name": "CalendarCellEvents.vue",
      "content": "<script setup lang=\"ts\">\nimport { computed, onUpdated } from 'vue'\nimport CalendarCellEvent from './CalendarCellEvent.vue'\nimport type { CalendarEventsProps } from '.'\nimport { Button } from '@/lib/registry/new-york/ui/button'\nimport {\n  HoverCard,\n  HoverCardContent,\n  HoverCardTrigger,\n} from '@/lib/registry/new-york/ui/hover-card'\n\nconst props = withDefaults(defineProps<CalendarEventsProps>(), {\n  hover: true,\n})\nconst emits = defineEmits(['more', 'eventClick'])\n\nconst shownEvents = computed(() => {\n  return props.isDisplayAll ? props.events : props.events?.slice(0, 2)\n})\n\nonUpdated(() => {\n  console.log('CalendarCellEvents updated')\n})\n</script>\n\n<template>\n  <div class=\"w-full flex flex-col justify-start items-stretch gap-1\">\n    <slot :events=\"events\">\n      <template v-for=\"event in shownEvents\" :key=\"event\">\n        <slot name=\"event\" :event=\"event\">\n          <template v-if=\"!props.hover\">\n            <CalendarCellEvent :event=\"event\" @click=\"emits('eventClick', event)\" />\n          </template>\n          <HoverCard v-else>\n            <HoverCardTrigger as-child>\n              <CalendarCellEvent :event=\"event\" @click=\"emits('eventClick', event)\" />\n            </HoverCardTrigger>\n            <HoverCardContent>\n              <slot name=\"tooltip\" :event=\"event\">\n                <div class=\"flex flex-col justify-start items-start\">\n                  <strong class=\"text-sm font-bold mb-2\">{{ event.title }}</strong>\n                  <div class=\"text-xs flex flex-row justify-start items-center gap-1\">\n                    <span>{{ event?.start }}</span>\n                    <span>~</span>\n                    <span>{{ event?.end }}</span>\n                  </div>\n                  <div class=\"text-xs\">\n                    {{ event?.date }}\n                  </div>\n                </div>\n              </slot>\n            </HoverCardContent>\n          </HoverCard>\n        </slot>\n      </template>\n      <div v-if=\"props.events && props.events?.length > 2 && !props.isDisplayAll\" class=\"flex flex-row justify-end items-end\">\n        <Button size=\"xs\" variant=\"ghost\" class=\"text-xs\" @click=\"emits('more', events)\">\n          More...\n        </Button>\n      </div>\n    </slot>\n  </div>\n</template>\n"
    },
    {
      "name": "CalendarCellTrigger.vue",
      "content": "<script lang=\"ts\" setup>\nimport { type HTMLAttributes, computed, onUpdated } from 'vue'\nimport { CalendarCellTrigger, type CalendarCellTriggerProps, useForwardProps } from 'radix-vue'\nimport { buttonVariants } from '@/lib/registry/new-york/ui/button'\nimport { cn } from '@/lib/utils'\n\nconst props = defineProps<CalendarCellTriggerProps & { class?: HTMLAttributes['class'] }>()\n\nconst delegatedProps = computed(() => {\n  const { class: _, ...delegated } = props\n\n  return delegated\n})\n\nconst forwardedProps = useForwardProps(delegatedProps)\n\nonUpdated(() => {\n  console.log('CalendarCellTrigger updated')\n})\n</script>\n\n<template>\n  <CalendarCellTrigger\n    :class=\"cn(\n      buttonVariants({ variant: 'ghost' }),\n      'h-7 w-7 rounded-full p-0 font-normal',\n      '[&[data-today]:not([data-selected])]:bg-accent [&[data-today]:not([data-selected])]:text-accent-foreground',\n      // Selected\n      'data-[selected]:bg-primary data-[selected]:text-primary-foreground data-[selected]:opacity-100 data-[selected]:hover:bg-primary data-[selected]:hover:text-primary-foreground data-[selected]:focus:bg-primary data-[selected]:focus:text-primary-foreground',\n      // Disabled\n      'data-[disabled]:text-muted-foreground data-[disabled]:opacity-50',\n      // Unavailable\n      'data-[unavailable]:text-destructive-foreground data-[unavailable]:line-through',\n      // Outside months\n      'data-[outside-month]:pointer-events-none data-[outside-month]:text-muted-foreground data-[outside-month]:opacity-50 [&[data-outside-month][data-selected]]:bg-accent/50 [&[data-outside-month][data-selected]]:text-muted-foreground [&[data-outside-month][data-selected]]:opacity-30',\n      props.class,\n    )\"\n    v-bind=\"forwardedProps\"\n  >\n    <slot />\n  </CalendarCellTrigger>\n</template>\n"
    },
    {
      "name": "CalendarGrid.vue",
      "content": "<script lang=\"ts\" setup>\nimport { type HTMLAttributes, computed, onUpdated } from 'vue'\nimport { CalendarGrid, type CalendarGridProps, useForwardProps } from 'radix-vue'\nimport { cn } from '@/lib/utils'\n\nconst props = defineProps<CalendarGridProps & { class?: HTMLAttributes['class'] }>()\n\nconst delegatedProps = computed(() => {\n  const { class: _, ...delegated } = props\n\n  return delegated\n})\n\nconst forwardedProps = useForwardProps(delegatedProps)\n\nonUpdated(() => {\n  console.log('CalendarGrid updated')\n})\n</script>\n\n<template>\n  <CalendarGrid\n    :class=\"cn('calendar-grid w-full border-collapse ', props.class)\"\n    v-bind=\"forwardedProps\"\n  >\n    <slot />\n  </CalendarGrid>\n</template>\n"
    },
    {
      "name": "CalendarGridBody.vue",
      "content": "<script lang=\"ts\" setup>\nimport { CalendarGridBody, type CalendarGridBodyProps } from 'radix-vue'\n\nconst props = defineProps<CalendarGridBodyProps>()\n</script>\n\n<template>\n  <CalendarGridBody v-bind=\"props\">\n    <slot />\n  </CalendarGridBody>\n</template>\n"
    },
    {
      "name": "CalendarGridHead.vue",
      "content": "<script lang=\"ts\" setup>\nimport { CalendarGridHead, type CalendarGridHeadProps } from 'radix-vue'\n\nconst props = defineProps<CalendarGridHeadProps>()\n</script>\n\n<template>\n  <CalendarGridHead v-bind=\"props\">\n    <slot />\n  </CalendarGridHead>\n</template>\n"
    },
    {
      "name": "CalendarGridRow.vue",
      "content": "<script lang=\"ts\" setup>\nimport { type HTMLAttributes, computed } from 'vue'\nimport { CalendarGridRow, type CalendarGridRowProps, useForwardProps } from 'radix-vue'\nimport { cn } from '@/lib/utils'\n\nconst props = defineProps<CalendarGridRowProps & { class?: HTMLAttributes['class'] }>()\n\nconst delegatedProps = computed(() => {\n  const { class: _, ...delegated } = props\n\n  return delegated\n})\n\nconst forwardedProps = useForwardProps(delegatedProps)\n</script>\n\n<template>\n  <CalendarGridRow :class=\"cn('calendar-grid-row flex', props.class)\" v-bind=\"forwardedProps\">\n    <slot />\n  </CalendarGridRow>\n</template>\n"
    },
    {
      "name": "CalendarHeadCell.vue",
      "content": "<script lang=\"ts\" setup>\nimport { type HTMLAttributes, computed, onUpdated } from 'vue'\nimport { CalendarHeadCell, type CalendarHeadCellProps, useForwardProps } from 'radix-vue'\nimport { cn } from '@/lib/utils'\n\nconst props = defineProps<CalendarHeadCellProps & { class?: HTMLAttributes['class'] }>()\n\nconst delegatedProps = computed(() => {\n  const { class: _, ...delegated } = props\n\n  return delegated\n})\n\nconst forwardedProps = useForwardProps(delegatedProps)\n\nonUpdated(() => {\n  console.log('CalendarHeadCell updated')\n})\n</script>\n\n<template>\n  <CalendarHeadCell :class=\"cn('border min-h-8 flex flex-row justify-center items-center w-full h-full text-[0.8rem] font-normal text-muted-foreground', props.class)\" v-bind=\"forwardedProps\">\n    <slot />\n  </CalendarHeadCell>\n</template>\n"
    },
    {
      "name": "CalendarHeader.vue",
      "content": "<script lang=\"ts\" setup>\nimport { type HTMLAttributes, computed } from 'vue'\nimport { CalendarHeader, type CalendarHeaderProps, useForwardProps } from 'radix-vue'\nimport { cn } from '@/lib/utils'\n\nconst props = defineProps<CalendarHeaderProps & { class?: HTMLAttributes['class'] }>()\n\nconst delegatedProps = computed(() => {\n  const { class: _, ...delegated } = props\n\n  return delegated\n})\n\nconst forwardedProps = useForwardProps(delegatedProps)\n</script>\n\n<template>\n  <CalendarHeader :class=\"cn('relative flex w-full items-center justify-between', props.class)\" v-bind=\"forwardedProps\">\n    <slot />\n  </CalendarHeader>\n</template>\n"
    },
    {
      "name": "CalendarHeading.vue",
      "content": "<script lang=\"ts\" setup>\nimport { type HTMLAttributes, computed } from 'vue'\nimport { CalendarHeading, type CalendarHeadingProps, useForwardProps } from 'radix-vue'\nimport { cn } from '@/lib/utils'\n\nconst props = defineProps<CalendarHeadingProps & { class?: HTMLAttributes['class'] }>()\n\nconst delegatedProps = computed(() => {\n  const { class: _, ...delegated } = props\n\n  return delegated\n})\n\nconst forwardedProps = useForwardProps(delegatedProps)\n</script>\n\n<template>\n  <CalendarHeading\n    v-slot=\"{ headingValue }\"\n    :class=\"cn('text-sm font-medium h-9 px-2 flex justify-center items-center border rounded-lg whitespace-nowrap', props.class)\"\n    v-bind=\"forwardedProps\"\n  >\n    <slot :heading-value>\n      {{ headingValue }}\n    </slot>\n  </CalendarHeading>\n</template>\n"
    },
    {
      "name": "CalendarNextButton.vue",
      "content": "<script lang=\"ts\" setup>\nimport { type HTMLAttributes, computed } from 'vue'\nimport { CalendarNext, type CalendarNextProps, useForwardProps } from 'radix-vue'\nimport { ChevronRight } from 'lucide-vue-next'\nimport { cn } from '@/lib/utils'\nimport { buttonVariants } from '@/lib/registry/new-york/ui/button'\n\nconst props = defineProps<CalendarNextProps & { class?: HTMLAttributes['class'] }>()\n\nconst delegatedProps = computed(() => {\n  const { class: _, ...delegated } = props\n\n  return delegated\n})\n\nconst forwardedProps = useForwardProps(delegatedProps)\n</script>\n\n<template>\n  <CalendarNext\n    :class=\"cn(\n      buttonVariants({ variant: 'outline', size: 'sm' }),\n      'h-9 w-9 bg-transparent p-0',\n      props.class,\n    )\"\n    v-bind=\"forwardedProps\"\n  >\n    <slot>\n      <ChevronRight class=\"h-4 w-4\" />\n    </slot>\n  </CalendarNext>\n</template>\n"
    },
    {
      "name": "CalendarPrevButton.vue",
      "content": "<script lang=\"ts\" setup>\nimport { type HTMLAttributes, computed } from 'vue'\nimport { CalendarPrev, type CalendarPrevProps, useForwardProps } from 'radix-vue'\nimport { ChevronLeft } from 'lucide-vue-next'\nimport { cn } from '@/lib/utils'\nimport { buttonVariants } from '@/lib/registry/new-york/ui/button'\n\nconst props = defineProps<CalendarPrevProps & { class?: HTMLAttributes['class'] }>()\n\nconst delegatedProps = computed(() => {\n  const { class: _, ...delegated } = props\n\n  return delegated\n})\n\nconst forwardedProps = useForwardProps(delegatedProps)\n</script>\n\n<template>\n  <CalendarPrev\n    :class=\"cn(\n      buttonVariants({ variant: 'outline', size: 'sm' }),\n      'h-9 w-9 bg-transparent p-0',\n      props.class,\n    )\"\n    v-bind=\"forwardedProps\"\n  >\n    <slot>\n      <ChevronLeft class=\"h-4 w-4\" />\n    </slot>\n  </CalendarPrev>\n</template>\n"
    },
    {
      "name": "index.ts",
      "content": "export { default as Calendar } from './Calendar.vue'\nexport { default as CalendarCell } from './CalendarCell.vue'\nexport { default as CalendarCellTrigger } from './CalendarCellTrigger.vue'\nexport { default as CalendarGrid } from './CalendarGrid.vue'\nexport { default as CalendarGridBody } from './CalendarGridBody.vue'\nexport { default as CalendarGridHead } from './CalendarGridHead.vue'\nexport { default as CalendarGridRow } from './CalendarGridRow.vue'\nexport { default as CalendarHeadCell } from './CalendarHeadCell.vue'\nexport { default as CalendarHeader } from './CalendarHeader.vue'\nexport { default as CalendarHeading } from './CalendarHeading.vue'\nexport { default as CalendarNextButton } from './CalendarNextButton.vue'\nexport { default as CalendarPrevButton } from './CalendarPrevButton.vue'\nexport { default as CalendarCellEvents } from './CalendarCellEvents.vue'\nexport { default as CalendarCellEvent } from './CalendarCellEvent.vue'\nexport { default as CalendarActions } from './CalendarActions.vue'\n\nexport interface CalendarEvent {\n  id?: string\n  title?: string\n  start?: string\n  end?: string\n  date?: string\n  allDay?: boolean\n  backgroundColor?: string\n  borderColor?: string\n  textColor?: string\n  color?: string\n}\n\nexport interface CalendarEventProps {\n  event?: CalendarEvent\n}\n\nexport interface CalendarEventsProps {\n  events?: CalendarEvent[]\n  isDisplayAll?: boolean\n  hover?: boolean\n}\n"
    },
    {
      "name": "useCalendarEvents.ts",
      "content": "import { computed } from 'vue'\nimport type { CalendarEvent } from '.'\n\nexport function useCalendarEvents(events: CalendarEvent[]) {\n  const mapEvents = computed(() => {\n    const maps = new Map<string, CalendarEvent[]>()\n\n    events.forEach((event) => {\n      const date = event.date || Date.toString() // Assuming each event has a 'date' property\n      if (maps.has(date))\n        maps.get(date)?.push(event)\n      else\n        maps.set(date, [event])\n    })\n\n    return maps\n  })\n\n  function getEventsByDate(date: string) {\n    if (!mapEvents.value.has(date))\n      return []\n    return Array.from(mapEvents.value.get(date)?.values() || [])\n  }\n  return {\n    events,\n    mapEvents,\n    getEventsByDate,\n  }\n}\n"
    }
  ],
  "type": "components:ui"
}
