{
  "name": "table",
  "dependencies": [
    "@tanstack/vue-table"
  ],
  "registryDependencies": [
    "utils",
    "table",
    "checkbox"
  ],
  "files": [
    {
      "name": "DataTable.vue",
      "content": "<script setup lang=\"ts\" generic=\"TData, TValue\">\nimport type {\n  ColumnDef,\n  ColumnFiltersState,\n  ExpandedState,\n  Row,\n  RowSelectionState,\n  SortingState,\n  VisibilityState\n} from '@tanstack/vue-table'\nimport {\n  FlexRender,\n  getCoreRowModel,\n  getFacetedRowModel,\n  getFacetedUniqueValues,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  getExpandedRowModel,\n  useVueTable\n} from '@tanstack/vue-table'\n\nimport { cn, valueUpdater } from '@/lib/utils'\nimport { h, ref, type Component } from 'vue'\nimport { ChevronsUpDown } from 'lucide-vue-next'\nimport DataTableToolbar from './DataTableToolbar.vue'\nimport DataTableRowActions from './DataTableRowActions.vue'\nimport DataTablePagination from './DataTablePagination.vue'\nimport DataTableColumnHeader from './DataTableColumnHeader.vue'\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow\n} from '@/components/ui/table'\nimport { Checkbox } from '@/components/ui/checkbox'\n\ninterface Filter {\n  value: string\n  label: string\n  icon: Component | undefined\n}\ninterface DataTableProps {\n  columns: (ColumnDef<TData, TValue> & {\n    title?: string\n    filterable?: boolean\n    enableFiltering?: boolean\n    align?: 'left' | 'center' | 'right'\n  })[]\n  data: TData[]\n  search?: {\n    key: string\n    placeholder: string\n    fuction: (value: string) => void\n  }\n  filters?: {\n    key: string\n    title: string\n    options: Filter[]\n  }[]\n  selection?: boolean\n  actions?: {\n    label: string\n    options: {\n      label: string\n      icon?: Component\n      shortcut?: string\n      action?: (row: TData | Row<TData> | unknown) => void\n    }[]\n  }\n  expanded?: boolean\n  pagination?: boolean\n  toolbar?: boolean\n  pinning?: {\n    left?: string[]\n    right?: string[]\n  }\n}\nconst props = withDefaults(defineProps<DataTableProps>(), {\n  pagination: true,\n})\n\nconst selectColumn = {\n  id: 'select',\n  enablePinning: true,\n  header: ({ table }: { table: any }) =>\n    h(Checkbox, {\n      checked: table.getIsAllPageRowsSelected(),\n      'onUpdate:checked': (value: boolean) => table.toggleAllPageRowsSelected(!!value),\n      ariaLabel: 'Select all'\n    }),\n  cell: ({ row }: { row: any }) =>\n    h(Checkbox, {\n      checked: row.getIsSelected(),\n      'onUpdate:checked': (value: boolean) => row.toggleSelected(!!value),\n      ariaLabel: 'Select row'\n    }),\n  enableSorting: false,\n  enableHiding: false\n}\n\nconst generateExpandedAction = (row: any) => {\n  const expandedOption = {\n    label: 'Expand',\n    icon: ChevronsUpDown,\n    action: () => row.toggleExpanded()\n  }\n\n  const actions = props.expanded\n    ? {\n        ...props.actions,\n        label: props.actions?.label || 'Actions',\n        options: [...(props.actions?.options || []), expandedOption]\n      }\n    : props.actions\n  return actions\n}\nconst actionColumn = () => {\n  if (!props.actions && !props.expanded) return []\n  return [\n    {\n      id: 'actions',\n      cell: ({ row }: { row: any }) =>\n        h(DataTableRowActions, { row, actions: generateExpandedAction(row) })\n    }\n  ]\n}\nconst generateColumns = () => {\n  const filterFn = (row: any, id: any, value: any) => {\n    return value.includes(row.getValue(id))\n  }\n  const header = (title: string, align: string = 'center') => {\n    return ({ column }: { column: any }) => h(DataTableColumnHeader, { column, title: title })\n  }\n  const newColumns = props.columns.map((column) => ({\n    ...column,\n    header: column.title ? header(column.title, column.align) : column.header,\n    filterFn: column.enableFiltering ? column.filterFn || filterFn : undefined\n  }))\n  const withActionsColumn = [...newColumns, ...actionColumn()]\n  return (props.selection ? [selectColumn, ...withActionsColumn] : withActionsColumn) as ColumnDef<\n    TData,\n    TValue\n  >[]\n}\nconst sorting = ref<SortingState>([])\nconst columnFilters = ref<ColumnFiltersState>([])\nconst columnVisibility = ref<VisibilityState>({})\nconst rowSelection = defineModel<RowSelectionState | undefined>({})\nconst coreRowSelection = defineModel<TData[]>('selected', {\n  type: Array,\n  default: () => []\n})\nconst expanded = ref<ExpandedState>({})\n\nconst table = useVueTable({\n  get data() {\n    return props.data\n  },\n  get columns() {\n    return generateColumns()\n  },\n  state: {\n    get sorting() {\n      return sorting.value\n    },\n    get columnFilters() {\n      return columnFilters.value\n    },\n    get columnVisibility() {\n      return columnVisibility.value\n    },\n    get rowSelection() {\n      return rowSelection.value\n    },\n    get expanded() {\n      return expanded.value\n    },\n    columnPinning: {\n      left: props.pinning?.left ? ['select', ...props.pinning?.left] : [],\n      right: props.pinning?.right || []\n    }\n  },\n  enableRowSelection: true,\n  onSortingChange: (updaterOrValue) => valueUpdater(updaterOrValue, sorting),\n  onColumnFiltersChange: (updaterOrValue) => valueUpdater(updaterOrValue, columnFilters),\n  onExpandedChange: (updaterOrValue) => valueUpdater(updaterOrValue, expanded),\n  onColumnVisibilityChange: (updaterOrValue) => valueUpdater(updaterOrValue, columnVisibility),\n  onRowSelectionChange: async (updaterOrValue) => {\n    await valueUpdater(updaterOrValue, rowSelection)\n\n    const filteredData = props.data.filter((_, index) =>\n      rowSelection.value ? Object.keys(rowSelection.value).includes(index.toString()) : []\n    )\n    coreRowSelection.value = filteredData\n  },\n  getCoreRowModel: getCoreRowModel(),\n  getFilteredRowModel: getFilteredRowModel(),\n  getExpandedRowModel: getExpandedRowModel(),\n  getPaginationRowModel: getPaginationRowModel(),\n  getSortedRowModel: getSortedRowModel(),\n  getFacetedRowModel: getFacetedRowModel(),\n  getFacetedUniqueValues: getFacetedUniqueValues()\n})\n</script>\n\n<template>\n  <div class=\"space-y-4\">\n    <DataTableToolbar v-if=\"props.toolbar\" :table=\"table\" :search=\"props.search\" :filters=\"props.filters\" />\n    <div class=\"rounded-md border\">\n      <Table>\n        <TableHeader>\n          <TableRow v-for=\"headerGroup in table.getHeaderGroups()\" :key=\"headerGroup.id\">\n            <TableHead\n              v-for=\"header in headerGroup.headers\"\n              :key=\"header.id\"\n              :class=\"\n                cn(\n                  { 'sticky bg-background/95': header.column.getIsPinned() },\n                  header.column.getIsPinned() === 'left' ? 'left-0' : 'right-0'\n                )\n              \"\n            >\n              <FlexRender\n                v-if=\"!header.isPlaceholder\"\n                :render=\"header.column.columnDef.header\"\n                :props=\"header.getContext()\"\n              />\n            </TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          <template v-if=\"table.getRowModel().rows?.length\">\n            <template v-for=\"(row, rowIndex) in table.getRowModel().rows\" :key=\"row.id\">\n              <TableRow :data-state=\"row.getIsSelected() ? 'selected' : undefined\">\n                <slot\n                  name=\"row\"\n                  :row=\"row\"\n                  :rowIndex=\"rowIndex\"\n                  :selected=\"row.getIsSelected()\"\n                  :cells=\"row.getVisibleCells()\"\n                >\n                  <TableCell\n                    v-for=\"(cell, cellIndex) in row.getVisibleCells()\"\n                    :key=\"cell.id\"\n                    :class=\"\n                      cn(\n                        { 'sticky bg-background/95': cell.column.getIsPinned() },\n                        cell.column.getIsPinned() === 'left' ? 'left-0' : 'right-0'\n                      )\n                    \"\n                  >\n                    <slot\n                      name=\"cell\"\n                      :cell=\"cell\"\n                      :row=\"row\"\n                      :rowIndex=\"rowIndex\"\n                      :cellIndex=\"cellIndex\"\n                    >\n                      <slot\n                        :name=\"`cell-${cell.column.columnDef.id}`\"\n                        :cell=\"cell.getValue()\"\n                        :row=\"row.original\"\n                        :rowIndex=\"rowIndex\"\n                        :cellIndex=\"cellIndex\"\n                      >\n                        <FlexRender\n                          :render=\"cell.column.columnDef.cell\"\n                          :props=\"cell.getContext()\"\n                        />\n                      </slot>\n                    </slot>\n                  </TableCell>\n                </slot>\n              </TableRow>\n              <TableRow v-if=\"row.getIsExpanded()\">\n                <TableCell :colspan=\"row.getAllCells().length\">\n                  <slot\n                    name=\"expanded\"\n                    :row=\"row\"\n                    :rowIndex=\"rowIndex\"\n                    :selected=\"row.getIsSelected()\"\n                    :cells=\"row.getVisibleCells()\"\n                  >\n                    {{ JSON.stringify(row.original) }}\n                  </slot>\n                </TableCell>\n              </TableRow>\n            </template>\n          </template>\n\n          <TableRow v-else>\n            <TableCell :colspan=\"columns.length\" class=\"h-24 text-center\">\n              <slot name=\"empty\">No results.</slot>\n            </TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n    </div>\n\n    <DataTablePagination v-if=\"props.pagination\" :table=\"table\" />\n  </div>\n</template>\n"
    },
    {
      "name": "DataTableColumnHeader.vue",
      "content": "<script setup lang=\"ts\">\nimport type { Column } from '@tanstack/vue-table'\nimport { ArrowDown, ArrowUp, EyeOff, ChevronsUpDown } from 'lucide-vue-next'\n\nimport { cn } from '@/lib/utils'\nimport { Button } from '../button'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger\n} from '../dropdown-menu'\n\ninterface DataTableColumnHeaderProps {\n  column: Column<any, any>\n  title: string\n}\n\ndefineProps<DataTableColumnHeaderProps>()\n</script>\n\n<script lang=\"ts\">\nexport default {\n  inheritAttrs: false\n}\n</script>\n\n<template>\n  <div v-if=\"column.getCanSort()\" :class=\"cn('flex items-center space-x-2', $attrs.class ?? '')\">\n    <DropdownMenu>\n      <DropdownMenuTrigger as-child>\n        <Button variant=\"ghost\" size=\"sm\" class=\"-ml-3 h-8 data-[state=open]:bg-accent\">\n          <span>{{ title }}</span>\n          <ArrowDown v-if=\"column.getIsSorted() === 'desc'\" class=\"w-4 h-4 ml-2\" />\n          <ArrowUp v-else-if=\"column.getIsSorted() === 'asc'\" class=\"w-4 h-4 ml-2\" />\n          <ChevronsUpDown v-else class=\"w-4 h-4 ml-2\" />\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"start\">\n        <DropdownMenuItem @click=\"column.toggleSorting(false)\">\n          <ArrowUp class=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n          Asc\n        </DropdownMenuItem>\n        <DropdownMenuItem @click=\"column.toggleSorting(true)\">\n          <ArrowDown class=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n          Desc\n        </DropdownMenuItem>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem @click=\"column.toggleVisibility(false)\">\n          <EyeOff class=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n          Hide\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  </div>\n\n  <div v-else :class=\"$attrs.class\">\n    {{ title }}\n  </div>\n</template>\n"
    },
    {
      "name": "DataTableFacetedFilter.vue",
      "content": "<script setup lang=\"ts\">\nimport type { Column } from '@tanstack/vue-table'\nimport type { Component } from 'vue'\nimport { computed } from 'vue'\nimport { Check, CirclePlus } from 'lucide-vue-next'\n\nimport { Badge } from '../badge'\nimport { Button } from '../button'\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator\n} from '../command'\n\nimport { Popover, PopoverContent, PopoverTrigger } from '../popover'\nimport { Separator } from '../separator'\nimport { cn } from '@/lib/utils'\n\ninterface DataTableFacetedFilter {\n  column?: Column<any, any>\n  title?: string\n  options: {\n    label: string\n    value: string\n    icon?: Component\n  }[]\n}\n\nconst props = defineProps<DataTableFacetedFilter>()\n\nconst facets = computed(() => props.column?.getFacetedUniqueValues())\nconst selectedValues = computed(() => new Set(props.column?.getFilterValue() as string[]))\n\nfunction filterFunction(list: DataTableFacetedFilter['options'], term: any): any {\n  return list.filter((i) => i.label.toLowerCase()?.includes(term))\n}\n</script>\n\n<template>\n  <Popover>\n    <PopoverTrigger as-child>\n      <Button variant=\"outline\" size=\"sm\" class=\"h-8 border-dashed\">\n        <CirclePlus class=\"mr-2 h-4 w-4\" />\n        {{ title }}\n        <template v-if=\"selectedValues.size > 0\">\n          <Separator orientation=\"vertical\" class=\"mx-2 h-4\" />\n          <Badge variant=\"secondary\" class=\"rounded-sm px-1 font-normal lg:hidden\">\n            {{ selectedValues.size }}\n          </Badge>\n          <div class=\"hidden space-x-1 lg:flex\">\n            <Badge\n              v-if=\"selectedValues.size > 2\"\n              variant=\"secondary\"\n              class=\"rounded-sm px-1 font-normal\"\n            >\n              {{ selectedValues.size }} selected\n            </Badge>\n\n            <template v-else>\n              <Badge\n                v-for=\"option in options.filter((option) => selectedValues.has(option.value))\"\n                :key=\"option.value\"\n                variant=\"secondary\"\n                class=\"rounded-sm px-1 font-normal\"\n              >\n                {{ option.label }}\n              </Badge>\n            </template>\n          </div>\n        </template>\n      </Button>\n    </PopoverTrigger>\n    <PopoverContent class=\"w-[200px] p-0\" align=\"start\">\n      <!-- @vue-ignore -->\n      <Command :filter-function=\"filterFunction\">\n        <CommandInput :placeholder=\"title\" />\n        <CommandList>\n          <CommandEmpty>No results found.</CommandEmpty>\n          <CommandGroup>\n            <CommandItem\n              v-for=\"option in options\"\n              :key=\"option.value\"\n              :value=\"option\"\n              @select=\"\n                (e) => {\n                  console.log(e.detail.value)\n                  const isSelected = selectedValues.has(option.value)\n                  if (isSelected) {\n                    selectedValues.delete(option.value)\n                  } else {\n                    selectedValues.add(option.value)\n                  }\n                  const filterValues = Array.from(selectedValues)\n                  column?.setFilterValue(filterValues.length ? filterValues : undefined)\n                }\n              \"\n            >\n              <div\n                :class=\"\n                  cn(\n                    'mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary',\n                    selectedValues.has(option.value)\n                      ? 'bg-primary text-primary-foreground'\n                      : 'opacity-50 [&_svg]:invisible'\n                  )\n                \"\n              >\n                <Check :class=\"cn('h-4 w-4')\" />\n              </div>\n              <component\n                :is=\"option.icon\"\n                v-if=\"option.icon\"\n                class=\"mr-2 h-4 w-4 text-muted-foreground\"\n              />\n              <span>{{ option.label }}</span>\n              <span\n                v-if=\"facets?.get(option.value)\"\n                class=\"ml-auto flex h-4 w-4 items-center justify-center font-mono text-xs\"\n              >\n                {{ facets.get(option.value) }}\n              </span>\n            </CommandItem>\n          </CommandGroup>\n\n          <template v-if=\"selectedValues.size > 0\">\n            <CommandSeparator />\n            <CommandGroup>\n              <CommandItem\n                :value=\"{ label: 'Clear filters' }\"\n                class=\"justify-center text-center\"\n                @select=\"column?.setFilterValue(undefined)\"\n              >\n                Clear filters\n              </CommandItem>\n            </CommandGroup>\n          </template>\n        </CommandList>\n      </Command>\n    </PopoverContent>\n  </Popover>\n</template>\n"
    },
    {
      "name": "DataTablePagination.vue",
      "content": "<script setup lang=\"ts\">\nimport { type Table } from '@tanstack/vue-table'\nimport { ChevronLeft, ChevronRight, ChevronsLeft, ChevronsRight } from 'lucide-vue-next'\n\nimport { Button } from '../button'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue\n} from '../select'\n\ninterface DataTablePaginationProps {\n  table: Table<any>\n}\ndefineProps<DataTablePaginationProps>()\n</script>\n\n<template>\n  <div class=\"flex items-center justify-end lg:justify-between px-2\">\n    <div class=\"hidden lg:inline-block flex-1 text-sm text-muted-foreground\">\n      {{ table.getFilteredSelectedRowModel().rows.length }} of\n      {{ table.getFilteredRowModel().rows.length }} row(s) selected.\n    </div>\n    <div class=\"flex items-center space-x-6 lg:space-x-8\">\n      <div class=\"flex items-center space-x-2\">\n        <p class=\"text-sm font-medium\">Rows per page</p>\n        <Select\n          :model-value=\"`${table.getState().pagination.pageSize}`\"\n          @update:model-value=\"table.setPageSize\"\n        >\n          <SelectTrigger class=\"h-8 w-[70px]\">\n            <SelectValue :placeholder=\"`${table.getState().pagination.pageSize}`\" />\n          </SelectTrigger>\n          <SelectContent side=\"top\">\n            <SelectItem\n              v-for=\"pageSize in [10, 20, 30, 40, 50]\"\n              :key=\"pageSize\"\n              :value=\"`${pageSize}`\"\n            >\n              {{ pageSize }}\n            </SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n      <div class=\"flex w-[100px] items-center justify-center text-sm font-medium\">\n        Page {{ table.getState().pagination.pageIndex + 1 }} of\n        {{ table.getPageCount() }}\n      </div>\n      <div class=\"flex items-center space-x-2\">\n        <Button\n          variant=\"outline\"\n          class=\"hidden w-8 h-8 p-0 lg:flex\"\n          :disabled=\"!table.getCanPreviousPage()\"\n          @click=\"table.setPageIndex(0)\"\n        >\n          <span class=\"sr-only\">Go to first page</span>\n          <ChevronsLeft class=\"w-4 h-4\" />\n        </Button>\n        <Button\n          variant=\"outline\"\n          class=\"w-8 h-8 p-0\"\n          :disabled=\"!table.getCanPreviousPage()\"\n          @click=\"table.previousPage()\"\n        >\n          <span class=\"sr-only\">Go to previous page</span>\n          <ChevronLeft class=\"w-4 h-4\" />\n        </Button>\n        <Button\n          variant=\"outline\"\n          class=\"w-8 h-8 p-0\"\n          :disabled=\"!table.getCanNextPage()\"\n          @click=\"table.nextPage()\"\n        >\n          <span class=\"sr-only\">Go to next page</span>\n          <ChevronRight class=\"w-4 h-4\" />\n        </Button>\n        <Button\n          variant=\"outline\"\n          class=\"hidden w-8 h-8 p-0 lg:flex\"\n          :disabled=\"!table.getCanNextPage()\"\n          @click=\"table.setPageIndex(table.getPageCount() - 1)\"\n        >\n          <span class=\"sr-only\">Go to last page</span>\n          <ChevronsRight class=\"w-4 h-4\" />\n        </Button>\n      </div>\n    </div>\n  </div>\n</template>\n"
    },
    {
      "name": "DataTableRowActions.vue",
      "content": "<script setup lang=\"ts\" generic=\"TData, TAction\">\nimport type { Row } from '@tanstack/vue-table'\nimport type { Component } from 'vue'\nimport { EllipsisVertical } from 'lucide-vue-next'\nimport { Button } from '../button'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n  DropdownMenuGroup,\n  DropdownMenuLabel\n} from '../dropdown-menu'\n\ninterface DataTableRowActionsProps {\n  row: Row<TData>\n  actions?: {\n    label: string\n    options: {\n      label: string\n      icon?: Component\n      shortcut?: string\n      action?: (row: TData | Row<TData> | unknown) => void\n    }[]\n  }\n}\nconst props = defineProps<DataTableRowActionsProps>()\n</script>\n\n<template>\n  <DropdownMenu v-if=\"props.actions\">\n    <DropdownMenuTrigger as-child>\n      <Button variant=\"ghost\" class=\"flex h-8 w-8 p-0 data-[state=open]:bg-muted\">\n        <EllipsisVertical class=\"h-4 w-4\" />\n        <span class=\"sr-only\">Open menu</span>\n      </Button>\n    </DropdownMenuTrigger>\n    <DropdownMenuContent align=\"end\" class=\"w-56\">\n      <DropdownMenuLabel>{{ props.actions.label }}</DropdownMenuLabel>\n      <DropdownMenuSeparator />\n      <DropdownMenuGroup>\n        <DropdownMenuItem\n          v-for=\"(option, index) in props.actions.options\"\n          :key=\"index\"\n          @click=\"option.action ? option.action(props.row) : null\"\n        >\n          <component v-if=\"option.icon\" :is=\"option.icon\" class=\"mr-2 h-4 w-4\" />\n          <span>{{ option.label }}</span>\n          <DropdownMenuShortcut v-if=\"option.shortcut\">{{ option.shortcut }}</DropdownMenuShortcut>\n        </DropdownMenuItem>\n      </DropdownMenuGroup>\n    </DropdownMenuContent>\n  </DropdownMenu>\n</template>\n"
    },
    {
      "name": "DataTableToolbar.vue",
      "content": "<script setup lang=\"ts\" generic=\"TData\">\nimport type { Table } from '@tanstack/vue-table'\nimport { computed, type Component } from 'vue'\n\nimport DataTableFacetedFilter from './DataTableFacetedFilter.vue'\nimport DataTableViewOptions from './DataTableViewOptions.vue'\nimport { X } from 'lucide-vue-next'\nimport { Button } from '../button'\nimport { Input } from '../input'\n\ninterface Filter {\n  value: string\n  label: string\n  icon: Component | undefined\n}\ninterface DataTableToolbarProps {\n  table: Table<TData>\n  search?: {\n    key: string\n    placeholder: string\n    fuction: (value: string) => void\n  }\n  filters?: {\n    key: string\n    title: string\n    options: Filter[]\n  }[]\n}\n\nconst props = defineProps<DataTableToolbarProps>()\n\nconst isFiltered = computed(() => props.table.getState().columnFilters.length > 0)\n</script>\n\n<template>\n  <div class=\"flex items-center justify-between\">\n    <div class=\"flex flex-1 items-center space-x-2\">\n      <template v-if=\"props.search\">\n        <Input\n          :placeholder=\"props.search?.placeholder ?? 'Search...'\"\n          :model-value=\"(table.getColumn(props.search?.key)?.getFilterValue() as string) ?? ''\"\n          class=\"h-8 w-[150px] lg:w-[250px]\"\n          @input=\"table.getColumn(props.search?.key)?.setFilterValue($event.target.value)\"\n        />\n      </template>\n      <template v-if=\"props?.filters && props?.filters?.length > 0\">\n        <DataTableFacetedFilter\n          v-for=\"(filter, index) in props.filters\"\n          :key=\"index\"\n          :column=\"table.getColumn(filter?.key)\"\n          :title=\"filter.title\"\n          :options=\"filter.options\"\n        />\n      </template>\n\n      <Button\n        v-if=\"isFiltered\"\n        variant=\"ghost\"\n        class=\"h-8 px-2 lg:px-3\"\n        @click=\"table.resetColumnFilters()\"\n      >\n        Reset\n        <X class=\"ml-2 h-4 w-4\" />\n      </Button>\n    </div>\n    <DataTableViewOptions :table=\"table\" />\n  </div>\n</template>\n"
    },
    {
      "name": "DataTableViewOptions.vue",
      "content": "<script setup lang=\"ts\">\nimport { computed } from 'vue'\nimport type { Table } from '@tanstack/vue-table'\nimport { SlidersHorizontal } from 'lucide-vue-next'\n\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger\n} from '../dropdown-menu'\nimport { Button } from '../button'\n\ninterface DataTableViewOptionsProps {\n  table: Table<any>\n}\n\nconst props = defineProps<DataTableViewOptionsProps>()\n\nconst columns = computed(() =>\n  props.table\n    .getAllColumns()\n    .filter((column) => typeof column.accessorFn !== 'undefined' && column.getCanHide())\n)\n</script>\n\n<template>\n  <DropdownMenu>\n    <DropdownMenuTrigger as-child>\n      <Button variant=\"outline\" size=\"sm\" class=\"hidden h-8 ml-auto lg:flex\">\n        <SlidersHorizontal class=\"w-4 h-4 mr-2\" />\n        View\n      </Button>\n    </DropdownMenuTrigger>\n    <DropdownMenuContent align=\"end\" class=\"w-[150px]\">\n      <DropdownMenuLabel>Toggle columns</DropdownMenuLabel>\n      <DropdownMenuSeparator />\n\n      <DropdownMenuCheckboxItem\n        v-for=\"column in columns\"\n        :key=\"column.id\"\n        class=\"capitalize\"\n        :checked=\"column.getIsVisible()\"\n        @update:checked=\"(value) => column.toggleVisibility(!!value)\"\n      >\n        {{ column.id }}\n      </DropdownMenuCheckboxItem>\n    </DropdownMenuContent>\n  </DropdownMenu>\n</template>\n"
    },
    {
      "name": "Table.vue",
      "content": "<script setup lang=\"ts\">\nimport type { HTMLAttributes } from 'vue'\nimport { cn } from '@/lib/utils'\n\nconst props = defineProps<{\n  class?: HTMLAttributes['class']\n}>()\n</script>\n\n<template>\n  <div class=\"relative w-full overflow-auto\">\n    <table :class=\"cn('w-full caption-bottom text-sm', props.class)\">\n      <slot />\n    </table>\n  </div>\n</template>\n"
    },
    {
      "name": "TableBody.vue",
      "content": "<script setup lang=\"ts\">\nimport type { HTMLAttributes } from 'vue'\nimport { cn } from '@/lib/utils'\n\nconst props = defineProps<{\n  class?: HTMLAttributes['class']\n}>()\n</script>\n\n<template>\n  <tbody :class=\"cn('[&_tr:last-child]:border-0', props.class)\">\n    <slot />\n  </tbody>\n</template>\n"
    },
    {
      "name": "TableCaption.vue",
      "content": "<script setup lang=\"ts\">\nimport type { HTMLAttributes } from 'vue'\nimport { cn } from '@/lib/utils'\n\nconst props = defineProps<{\n  class?: HTMLAttributes['class']\n}>()\n</script>\n\n<template>\n  <caption :class=\"cn('mt-4 text-sm text-muted-foreground', props.class)\">\n    <slot />\n  </caption>\n</template>\n"
    },
    {
      "name": "TableCell.vue",
      "content": "<script setup lang=\"ts\">\nimport type { HTMLAttributes } from 'vue'\nimport { cn } from '@/lib/utils'\n\nconst props = defineProps<{\n  class?: HTMLAttributes['class']\n}>()\n</script>\n\n<template>\n  <td\n    :class=\"\n      cn(\n        'p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-0.5',\n        props.class,\n      )\n    \"\n  >\n    <slot />\n  </td>\n</template>\n"
    },
    {
      "name": "TableEmpty.vue",
      "content": "<script setup lang=\"ts\">\nimport { cn } from '@/lib/utils'\nimport { computed, type HTMLAttributes } from 'vue'\nimport TableCell from './TableCell.vue'\nimport TableRow from './TableRow.vue'\n\nconst props = withDefaults(defineProps<{\n  class?: HTMLAttributes['class']\n  colspan?: number\n}>(), {\n  colspan: 1,\n})\n\nconst delegatedProps = computed(() => {\n  const { class: _, ...delegated } = props\n\n  return delegated\n})\n</script>\n\n<template>\n  <TableRow>\n    <TableCell\n      :class=\"\n        cn(\n          'p-4 whitespace-nowrap align-middle text-sm text-foreground',\n          props.class,\n        )\n      \"\n      v-bind=\"delegatedProps\"\n    >\n      <div class=\"flex items-center justify-center py-10\">\n        <slot />\n      </div>\n    </TableCell>\n  </TableRow>\n</template>\n"
    },
    {
      "name": "TableFooter.vue",
      "content": "<script setup lang=\"ts\">\nimport type { HTMLAttributes } from 'vue'\nimport { cn } from '@/lib/utils'\n\nconst props = defineProps<{\n  class?: HTMLAttributes['class']\n}>()\n</script>\n\n<template>\n  <tfoot :class=\"cn('border-t bg-muted/50 font-medium [&>tr]:last:border-b-0', props.class)\">\n    <slot />\n  </tfoot>\n</template>\n"
    },
    {
      "name": "TableHead.vue",
      "content": "<script setup lang=\"ts\">\nimport type { HTMLAttributes } from 'vue'\nimport { cn } from '@/lib/utils'\n\nconst props = defineProps<{\n  class?: HTMLAttributes['class']\n}>()\n</script>\n\n<template>\n  <th :class=\"cn('h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-0.5', props.class)\">\n    <slot />\n  </th>\n</template>\n"
    },
    {
      "name": "TableHeader.vue",
      "content": "<script setup lang=\"ts\">\nimport type { HTMLAttributes } from 'vue'\nimport { cn } from '@/lib/utils'\n\nconst props = defineProps<{\n  class?: HTMLAttributes['class']\n}>()\n</script>\n\n<template>\n  <thead :class=\"cn('[&_tr]:border-b', props.class)\">\n    <slot />\n  </thead>\n</template>\n"
    },
    {
      "name": "TableRow.vue",
      "content": "<script setup lang=\"ts\">\nimport type { HTMLAttributes } from 'vue'\nimport { cn } from '@/lib/utils'\n\nconst props = defineProps<{\n  class?: HTMLAttributes['class']\n}>()\n</script>\n\n<template>\n  <tr :class=\"cn('border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted', props.class)\">\n    <slot />\n  </tr>\n</template>\n"
    },
    {
      "name": "index.ts",
      "content": "export { default as Table } from './Table.vue'\nexport { default as TableBody } from './TableBody.vue'\nexport { default as TableCell } from './TableCell.vue'\nexport { default as TableHead } from './TableHead.vue'\nexport { default as TableHeader } from './TableHeader.vue'\nexport { default as TableFooter } from './TableFooter.vue'\nexport { default as TableRow } from './TableRow.vue'\nexport { default as TableCaption } from './TableCaption.vue'\nexport { default as TableEmpty } from './TableEmpty.vue'\nexport { default as DataTable } from './DataTable.vue'\n"
    }
  ],
  "type": "components:ui"
}
