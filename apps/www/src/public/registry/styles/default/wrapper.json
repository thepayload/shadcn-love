{
  "name": "wrapper",
  "dependencies": [
    "vaul-vue",
    "@vueuse/core"
  ],
  "registryDependencies": [
    "alert-dialog",
    "alert",
    "utils",
    "avatar",
    "card",
    "context-menu",
    "dialog",
    "drawer",
    "dropdown-menu",
    "input",
    "form",
    "menubar",
    "number-field",
    "sheet",
    "tabs",
    "textarea",
    "tooltip"
  ],
  "files": [
    {
      "name": "AlertDialogWrapper.vue",
      "content": "<script setup lang=\"ts\">\nimport { type AlertDialogEmits, type AlertDialogProps, useForwardPropsEmits } from 'radix-vue'\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from '@/lib/registry/default/ui/alert-dialog'\n\nconst props = withDefaults(\n  defineProps<\n    AlertDialogProps & {\n      label?: string\n      title?: string\n      description?: string\n      onCancel?: () => void\n      onConfirm?: () => void\n      cancelText?: string\n      confirmText?: string\n    }\n  >(),\n  {\n    cancelText: 'Cancel',\n    confirmText: 'Continue',\n  },\n)\nconst emits = defineEmits<\n  AlertDialogEmits & {\n    cancel: []\n    confirm: []\n  }\n>()\nconst modelValue = defineModel<boolean>()\n\nconst forwarded = useForwardPropsEmits(props, emits)\n\nfunction onCancelAction() {\n  emits('cancel')\n  if (props.onCancel)\n    props.onCancel()\n}\n\nfunction onConfirmAction() {\n  emits('confirm')\n  if (props.onConfirm)\n    props.onConfirm()\n}\n</script>\n\n<template>\n  <AlertDialog v-bind=\"forwarded\" v-model:open=\"modelValue\">\n    <AlertDialogTrigger as-child>\n      <slot name=\"trigger\">\n        <Button v-if=\"props.label\" variant=\"outline\">\n          {{ props.label }}\n        </Button>\n      </slot>\n    </AlertDialogTrigger>\n    <AlertDialogContent>\n      <slot\n        :title=\"title\"\n        :description=\"description\"\n        :on-cancel=\"onCancelAction\"\n        :cancel-text=\"cancelText\"\n        :on-confirm=\"onConfirmAction\"\n        :confirm-text=\"confirmText\"\n      >\n        <AlertDialogHeader>\n          <AlertDialogTitle>{{ props.title }}</AlertDialogTitle>\n          <AlertDialogDescription>\n            {{ props.description }}\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel @click=\"onCancelAction\">\n            {{ props.cancelText }}\n          </AlertDialogCancel>\n          <AlertDialogAction @click=\"onConfirmAction\">\n            {{ props.confirmText }}\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </slot>\n    </AlertDialogContent>\n  </AlertDialog>\n</template>\n"
    },
    {
      "name": "AlertWrapper.vue",
      "content": "<script setup lang=\"ts\">\nimport type { HTMLAttributes } from 'vue'\nimport { type AlertVariants, alertVariants } from '@/lib/registry/default/ui/alert'\nimport { AlertDescription, AlertTitle } from '@/lib/registry/default/ui/alert'\nimport { cn } from '@/lib/utils'\n\nconst props = defineProps<{\n  class?: HTMLAttributes['class']\n  variant?: AlertVariants['variant']\n  title?: string\n  description?: string\n  icon?: any\n}>()\n</script>\n\n<template>\n  <div :class=\"cn(alertVariants({ variant }), props.class)\" role=\"alert\">\n    <slot :title=\"title\" :description=\"description\">\n      <slot name=\"icon\">\n        <component :is=\"icon\" class=\"h-4 w-4\" />\n      </slot>\n      <AlertTitle>{{ title }}</AlertTitle>\n      <AlertDescription> {{ description }} </AlertDescription>\n    </slot>\n  </div>\n</template>\n"
    },
    {
      "name": "AvatarWrapper.vue",
      "content": "<script setup lang=\"ts\">\nimport type { HTMLAttributes } from 'vue'\nimport { type AvatarVariants, avatarVariant } from '@/lib/registry/default/ui/avatar'\nimport { Avatar, AvatarFallback, AvatarImage } from '@/lib/registry/default/ui/avatar'\nimport { cn } from '@/lib/utils'\n\nconst props = withDefaults(\n  defineProps<{\n    class?: HTMLAttributes['class']\n    size?: AvatarVariants['size']\n    shape?: AvatarVariants['shape']\n    fallback: string\n    src?: string\n    alt?: string\n  }>(),\n  {\n    size: 'sm',\n    shape: 'circle',\n    fallback: 'AX',\n  },\n)\n</script>\n\n<template>\n  <Avatar :class=\"cn(avatarVariant({ size, shape }), props.class)\">\n    <slot>\n      <AvatarImage v-if=\"src\" :src=\"src\" :alt=\"alt || src\" />\n      <AvatarFallback>{{ fallback }}</AvatarFallback>\n    </slot>\n  </Avatar>\n</template>\n"
    },
    {
      "name": "CardWrapper.vue",
      "content": "<script setup lang=\"ts\">\nimport type { HTMLAttributes } from 'vue'\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/lib/registry/default/ui/card'\n\nconst props = defineProps<{\n  class?: HTMLAttributes['class']\n  title?: string\n  description?: string\n}>()\n</script>\n\n<template>\n  <Card :class=\"props.class\">\n    <slot name=\"header\" :title=\"title\" :description=\"description\">\n      <CardHeader v-if=\"props.title || props.description\">\n        <CardTitle v-if=\"props.title\">\n          {{ props.title }}\n        </CardTitle>\n        <CardDescription v-if=\"props.description\">\n          {{ props.description }}\n        </CardDescription>\n      </CardHeader>\n    </slot>\n    <CardContent>\n      <slot />\n    </CardContent>\n    <CardFooter v-if=\"$slots.footer\">\n      <slot name=\"footer\" />\n    </CardFooter>\n  </Card>\n</template>\n"
    },
    {
      "name": "ContextMenuWrapper.vue",
      "content": "<script setup lang=\"ts\">\nimport { useForwardPropsEmits } from 'radix-vue'\nimport type { ContextMenuRootEmits, ContextMenuRootProps } from 'radix-vue'\nimport { computed } from 'vue'\nimport {\n  ContextMenu,\n  ContextMenuCheckboxItem,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuLabel,\n  ContextMenuRadioGroup,\n  ContextMenuRadioItem,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuTrigger,\n} from '@/lib/registry/default/ui/context-menu'\n\ninterface MenuItem {\n  label: string\n  shortcut?: string\n  disabled?: boolean\n  inset?: boolean\n  separator?: boolean\n  checkbox?: boolean\n  radio?: boolean\n  options?: MenuItem[]\n  value?: string | boolean | any\n  action?: () => void\n  items: MenuItem[]\n}\n\nconst props = defineProps<\n  ContextMenuRootProps & {\n    items: MenuItem[]\n  }\n>()\nconst emits = defineEmits<ContextMenuRootEmits>()\nconst isInset = computed(() => {\n  return props.items.some(item => item.radio || item.checkbox)\n})\n\nconst forwarded = useForwardPropsEmits(props, emits)\n</script>\n\n<template>\n  <ContextMenu v-bind=\"forwarded\">\n    <ContextMenuTrigger>\n      <slot name=\"trigger\">\n        <p\n          class=\"flex h-[150px] w-[300px] items-center justify-center rounded-md border border-dashed text-sm\"\n        >\n          Right click here\n        </p>\n      </slot>\n    </ContextMenuTrigger>\n    <ContextMenuContent class=\"w-64\">\n      <template v-for=\"item in items\" :key=\"item.label\">\n        <ContextMenuSub v-if=\"item.items?.length > 0\">\n          <ContextMenuSubTrigger :inset=\"isInset || item.inset\">\n            {{ item.label }}\n          </ContextMenuSubTrigger>\n          <ContextMenuSubContent class=\"w-48\">\n            <template v-for=\"subItem in item.items\" :key=\"subItem.label\">\n              <ContextMenuItem :inset=\"isInset || subItem.inset\">\n                {{ subItem.label }}\n                <ContextMenuShortcut v-if=\"subItem.shortcut\">\n                  {{\n                    subItem.shortcut\n                  }}\n                </ContextMenuShortcut>\n              </ContextMenuItem>\n              <ContextMenuSeparator v-if=\"subItem.separator\" />\n            </template>\n          </ContextMenuSubContent>\n        </ContextMenuSub>\n        <ContextMenuCheckboxItem\n          v-else-if=\"item.checkbox\"\n          :checked=\"item.value\"\n          @click=\"item.action\"\n        >\n          {{ item.label }}\n          <ContextMenuShortcut v--if=\"item.shortcut\">\n            {{ item.shortcut }}\n          </ContextMenuShortcut>\n        </ContextMenuCheckboxItem>\n        <ContextMenuRadioGroup v-else-if=\"item.radio\" v-model=\"item.value\">\n          <ContextMenuSeparator />\n          <ContextMenuLabel :inset=\"isInset || item.inset\">\n            {{ item.label }}\n          </ContextMenuLabel>\n          <ContextMenuSeparator />\n          <ContextMenuRadioItem\n            v-for=\"radio in item.options\"\n            :key=\"radio.value\"\n            :value=\"radio.value\"\n            :inset=\"isInset || radio.inset\"\n            @click=\"radio.action\"\n          >\n            {{ radio.label }}\n          </ContextMenuRadioItem>\n        </ContextMenuRadioGroup>\n        <ContextMenuItem\n          v-else\n          :disabled=\"item.disabled\"\n          :inset=\"isInset || item.inset\"\n          @click=\"item.action\"\n        >\n          {{ item.label }}\n          <ContextMenuShortcut v-if=\"item.shortcut\">\n            {{ item.shortcut }}\n          </ContextMenuShortcut>\n        </ContextMenuItem>\n        <ContextMenuSeparator v-if=\"item.separator\" />\n      </template>\n    </ContextMenuContent>\n  </ContextMenu>\n</template>\n"
    },
    {
      "name": "DialogWrapper.vue",
      "content": "<script setup lang=\"ts\">\nimport { type DialogRootEmits, type DialogRootProps, useForwardPropsEmits } from 'radix-vue'\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/lib/registry/default/ui/dialog'\n\nconst props = defineProps<\n  DialogRootProps & {\n    title?: string\n    description?: string\n  }\n>()\nconst emits = defineEmits<DialogRootEmits>()\nconst modelValue = defineModel<boolean>()\nconst forwarded = useForwardPropsEmits(props, emits)\n</script>\n\n<template>\n  <Dialog v-bind=\"forwarded\" v-model:open=\"modelValue\">\n    <DialogTrigger as-child>\n      <slot name=\"trigger\" />\n    </DialogTrigger>\n    <DialogContent>\n      <DialogHeader v-if=\"title || description\" class=\"p-6 pb-0\">\n        <DialogTitle v-if=\"title\">\n          {{ props.title }}\n        </DialogTitle>\n        <DialogDescription v-if=\"description\">\n          {{ props.description }}\n        </DialogDescription>\n      </DialogHeader>\n      <slot />\n    </DialogContent>\n  </Dialog>\n</template>\n"
    },
    {
      "name": "DrawerWrapper.vue",
      "content": "<script lang=\"ts\" setup>\nimport type { DrawerRootEmits, DrawerRootProps } from 'vaul-vue'\nimport { useForwardPropsEmits } from 'radix-vue'\nimport {\n  Drawer,\n  DrawerContent,\n  DrawerDescription,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger,\n} from '@/lib/registry/default/ui/drawer'\n\nconst props = withDefaults(\n  defineProps<\n    DrawerRootProps & {\n      title?: string\n      description?: string\n    }\n  >(),\n  {\n    shouldScaleBackground: true,\n  },\n)\n\nconst emits = defineEmits<DrawerRootEmits>()\nconst modelValue = defineModel<boolean>()\nconst forwarded = useForwardPropsEmits(props, emits)\n</script>\n\n<template>\n  <Drawer v-bind=\"forwarded\" v-model:open=\"modelValue\">\n    <DrawerTrigger as-child>\n      <slot name=\"trigger\" />\n    </DrawerTrigger>\n    <DrawerContent>\n      <DrawerHeader class=\"text-left\">\n        <DrawerTitle v-if=\"props.title\">\n          {{ props.title }}\n        </DrawerTitle>\n        <DrawerDescription v-if=\"props.description\">\n          {{ props.description }}\n        </DrawerDescription>\n      </DrawerHeader>\n      <slot />\n    </DrawerContent>\n  </Drawer>\n</template>\n"
    },
    {
      "name": "DropdownMenuWrapper.vue",
      "content": "<script setup lang=\"ts\">\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuPortal,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n} from '@/lib/registry/default/ui/dropdown-menu'\n\ninterface MenuItem {\n  icon: any\n  label: string\n  shortcut?: string\n  disabled?: boolean\n  description?: string\n  action?: () => void\n  items?: MenuItem[]\n}\n\nexport interface DropdownMenuProps {\n  items: (MenuItem[] | MenuItem)[]\n  label: string\n  classMenuContent?: string\n  side?: 'top' | 'right' | 'bottom' | 'left'\n  align?: 'start' | 'center' | 'end'\n}\n\nconst props = defineProps<DropdownMenuProps>()\n</script>\n\n<template>\n  <DropdownMenu>\n    <DropdownMenuTrigger as-child>\n      <slot />\n    </DropdownMenuTrigger>\n    <DropdownMenuContent class=\"w-56\" :class=\"[classMenuContent]\" :side=\"side\" :align=\"align\">\n      <DropdownMenuLabel v-if=\"props.label\">\n        {{ props.label }}\n      </DropdownMenuLabel>\n      <DropdownMenuSeparator v-if=\"props.label\" />\n      <template v-for=\"item in items\" :key=\"item\">\n        <template v-if=\"Array.isArray(item)\">\n          <DropdownMenuGroup>\n            <DropdownMenuItem\n              v-for=\"groupItem in item\"\n              :key=\"groupItem.label\"\n              :disabled=\"groupItem.disabled\"\n              @click=\"groupItem.action\"\n            >\n              <component :is=\"groupItem.icon\" class=\"mr-2 h-4 w-4\" />\n              <span>{{ groupItem.label }}</span>\n              <DropdownMenuShortcut>{{ groupItem.shortcut }}</DropdownMenuShortcut>\n            </DropdownMenuItem>\n          </DropdownMenuGroup>\n          <DropdownMenuSeparator />\n        </template>\n        <DropdownMenuSub v-else-if=\"item.items && item.items?.length >= 0\">\n          <DropdownMenuSubTrigger :disabled=\"item.disabled\" @click=\"item.action\">\n            <component :is=\"item.icon\" class=\"mr-2 h-4 w-4\" />\n            <span>{{ item.label }}</span>\n          </DropdownMenuSubTrigger>\n          <DropdownMenuPortal>\n            <DropdownMenuSubContent>\n              <DropdownMenuItem\n                v-for=\"subItem in item.items\"\n                :key=\"subItem.label\"\n                :disabled=\"subItem.disabled\"\n                @click=\"subItem.action\"\n              >\n                <component :is=\"subItem.icon\" class=\"mr-2 h-4 w-4\" />\n                <span>{{ subItem.label }}</span>\n                <DropdownMenuShortcut>{{ subItem.shortcut }}</DropdownMenuShortcut>\n              </DropdownMenuItem>\n            </DropdownMenuSubContent>\n          </DropdownMenuPortal>\n        </DropdownMenuSub>\n        <DropdownMenuItem v-else :disabled=\"item.disabled\" @click=\"item.action\">\n          <div class=\"w-full\">\n            <div class=\"flex items-center\">\n              <component :is=\"item.icon\" class=\"mr-2 h-4 w-4\" />\n              <span>{{ item.label }}</span>\n              <DropdownMenuShortcut>{{ item.shortcut }}</DropdownMenuShortcut>\n            </div>\n            <p v-if=\"item.description\" class=\"mr-6 text-gray-500 text-xs\">\n              {{ item.description }}\n            </p>\n          </div>\n        </DropdownMenuItem>\n      </template>\n    </DropdownMenuContent>\n  </DropdownMenu>\n</template>\n"
    },
    {
      "name": "InputWrapper.vue",
      "content": "<script setup lang=\"ts\">\nimport { useVModel } from '@vueuse/core'\nimport type { HTMLAttributes } from 'vue'\nimport { Input } from '@/lib/registry/default/ui/input'\nimport { FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/lib/registry/default/ui/form'\n\nconst props = defineProps<{\n  defaultValue?: string | number\n  modelValue?: string | number\n  class?: HTMLAttributes['class']\n  id?: string\n  name?: string\n  label?: string\n  required?: boolean\n  placeholder?: string\n  description?: string\n  disabled?: boolean\n  loading?: boolean\n  prefix?: string\n  suffix?: string\n}>()\n\nconst emits = defineEmits<{\n  (e: 'update:modelValue', payload: string | number): void\n}>()\n\nconst modelValue = useVModel(props, 'modelValue', emits, {\n  passive: true,\n  defaultValue: props.defaultValue,\n})\n</script>\n\n<template>\n  <FormField v-slot=\"slotProps\" :name=\"props.name || ''\">\n    <FormItem v-bind=\"$attrs\">\n      <FormLabel v-if=\"props.label\">\n        {{ props.label }}\n        <span v-if=\"props.required\" class=\"text-destructive\"> *</span>\n      </FormLabel>\n      <FormControl>\n        <Input\n          v-bind=\"slotProps\" :id=\"props.id\" v-model=\"modelValue\"\n          :placeholder=\"props.placeholder\" :disabled=\"props.disabled\" :loading=\"props.loading\" :class=\"props.class\"\n          :prefix=\"props.prefix\" :suffix=\"props.suffix\"\n        />\n      </FormControl>\n      <FormDescription v-if=\"props.description\">\n        {{ props.description }}\n      </FormDescription>\n      <FormMessage />\n    </FormItem>\n  </FormField>\n</template>\n"
    },
    {
      "name": "MenubarWrapper.vue",
      "content": "<script setup lang=\"ts\">\nimport {\n  Menubar,\n  MenubarContent,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarWrapperContent,\n} from '@/lib/registry/default/ui/menubar'\n\ninterface Menu {\n  label: string\n  shortcut?: string\n  disabled?: boolean\n  separator?: boolean\n  inset?: boolean\n  checkbox?: boolean\n  radio?: boolean\n  key?: string\n  value?: string\n  action?: () => void\n  items: Menu[]\n}\n\ninterface Props {\n  items: Menu[]\n}\nconst props = defineProps<Props>()\n</script>\n\n<template>\n  <Menubar>\n    <MenubarMenu v-for=\"item in props.items\" :key=\"item.label\">\n      <MenubarTrigger>{{ item.label }}</MenubarTrigger>\n      <MenubarContent>\n        <MenubarWrapperContent :items=\"item.items\" />\n      </MenubarContent>\n    </MenubarMenu>\n  </Menubar>\n</template>\n"
    },
    {
      "name": "MenubarWrapperContent.vue",
      "content": "<script setup lang=\"ts\">\nimport {\n  MenubarCheckboxItem,\n  MenubarItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarSeparator,\n  MenubarShortcut,\n  MenubarSub,\n  MenubarSubContent,\n  MenubarSubTrigger,\n} from '@/lib/registry/default/ui/menubar'\n\ninterface Menu {\n  label: string\n  shortcut?: string\n  disabled?: boolean\n  separator?: boolean\n  inset?: boolean\n  checkbox?: boolean\n  radio?: boolean\n  key?: string\n  value?: string\n  action?: () => void\n  items: Menu[]\n}\n\ninterface Props {\n  items: Menu[]\n}\ndefineProps<Props>()\n</script>\n\n<template>\n  <template v-for=\"item in items\" :key=\"item\">\n    <MenubarSub v-if=\"item.items?.length > 0\">\n      <MenubarSubTrigger>{{ item.label }}</MenubarSubTrigger>\n      <MenubarSubContent>\n        <MenubarWrapperContent :items=\"item.items\" />\n      </MenubarSubContent>\n    </MenubarSub>\n    <MenubarItem\n      v-else-if=\"!item.separator && !item.checkbox && !item.radio\"\n      :disabled=\"item.disabled\"\n      :inset=\"item.inset\"\n      @click=\"item.action\"\n    >\n      {{ item.label }}\n      <MenubarShortcut v-if=\"item.shortcut\">\n        {{ item.shortcut }}\n      </MenubarShortcut>\n    </MenubarItem>\n    <MenubarSeparator v-else-if=\"item.separator\" />\n    <MenubarCheckboxItem v-else-if=\"item.checkbox\">\n      {{ item.label }}\n    </MenubarCheckboxItem>\n    <MenubarRadioGroup v-else-if=\"item.radio\" :value=\"item.value\">\n      <MenubarRadioItem\n        v-for=\"radioItem in item.items\"\n        :key=\"radioItem.label\"\n        :value=\"radioItem.value || radioItem.label\"\n      >\n        {{ radioItem.label }}\n      </MenubarRadioItem>\n    </MenubarRadioGroup>\n  </template>\n</template>\n"
    },
    {
      "name": "NumberFieldWrapper.vue",
      "content": "<script setup lang=\"ts\">\nimport { useVModel } from '@vueuse/core'\nimport type { HTMLAttributes } from 'vue'\nimport { FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/lib/registry/default/ui/form'\nimport {\n  NumberField,\n  NumberFieldContent,\n  NumberFieldDecrement,\n  NumberFieldIncrement,\n  NumberFieldInput,\n} from '@/lib/registry/default/ui/number-field'\n\nconst props = defineProps<{\n  defaultValue?: undefined | number\n  modelValue?: undefined | number\n  class?: HTMLAttributes['class']\n  id?: string\n  name?: string\n  label?: string\n  required?: boolean\n  placeholder?: string\n  description?: string\n  disabled?: boolean\n  loading?: boolean\n  prefix?: string\n  suffix?: string\n}>()\n\nconst emits = defineEmits<{\n  (e: 'update:modelValue', payload: string | number): void\n}>()\n\nconst modelValue = useVModel(props, 'modelValue', emits, {\n  passive: true,\n  defaultValue: props.defaultValue,\n})\n</script>\n\n<template>\n  <FormField v-slot=\"slotProps\" :name=\"props.name || ''\">\n    <FormItem v-bind=\"$attrs\">\n      <FormLabel v-if=\"props.label\">\n        {{ props.label }}\n        <span v-if=\"props.required\" class=\"text-destructive\"> *</span>\n      </FormLabel>\n      <FormControl>\n        <NumberField\n          v-bind=\"slotProps\" :id=\"props.id\"\n          v-model=\"modelValue\"\n          :min=\"0\"\n          :format-options=\"{\n            style: 'currency',\n            currency: 'EUR',\n            currencyDisplay: 'code',\n            currencySign: 'accounting',\n          }\"\n        >\n          <NumberFieldContent>\n            <NumberFieldDecrement :disabled=\"props.disabled\" />\n            <FormControl>\n              <NumberFieldInput :placeholder=\"props.placeholder\" :disabled=\"props.disabled\" :loading=\"props.loading\" :class=\"props.class\" />\n            </FormControl>\n            <NumberFieldIncrement :disabled=\"props.disabled\" />\n          </NumberFieldContent>\n        </NumberField>\n      </FormControl>\n      <FormDescription v-if=\"props.description\">\n        {{ props.description }}\n      </FormDescription>\n      <FormMessage />\n    </FormItem>\n  </FormField>\n</template>\n"
    },
    {
      "name": "SheetWrapper.vue",
      "content": "<script setup lang=\"ts\">\nimport { type DialogRootEmits, type DialogRootProps, useForwardPropsEmits } from 'radix-vue'\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from '@/lib/registry/default/ui/sheet'\n\nconst props = withDefaults(\n  defineProps<\n    DialogRootProps & {\n      title?: string\n      description?: string\n      side?: 'top' | 'right' | 'bottom' | 'left'\n    }\n  >(),\n  {\n    side: 'right',\n    title: '',\n    description: '',\n  },\n)\nconst emits = defineEmits<DialogRootEmits>()\n\nconst modelValue = defineModel<boolean>()\nconst forwarded = useForwardPropsEmits(props, emits)\n</script>\n\n<template>\n  <Sheet v-bind=\"forwarded\" v-model:open=\"modelValue\">\n    <SheetContent :side=\"side\">\n      <SheetHeader v-if=\"title || description\">\n        <SheetTitle v-if=\"title\">\n          {{ title }}\n        </SheetTitle>\n        <SheetDescription v-if=\"description\">\n          {{ description }}\n        </SheetDescription>\n      </SheetHeader>\n      <slot />\n    </SheetContent>\n  </Sheet>\n</template>\n"
    },
    {
      "name": "TabsWrapper.vue",
      "content": "<script setup lang=\"ts\">\nimport { useForwardPropsEmits } from 'radix-vue'\nimport type { TabsRootEmits, TabsRootProps } from 'radix-vue'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/lib/registry/default/ui/tabs'\n\nconst props = defineProps<\n  TabsRootProps & {\n    tabs: {\n      value: string\n      label: string\n      component: any\n      to?: string\n      props?: Record<string, any>\n      events?: Record<string, any>\n    }[]\n  }\n>()\nconst emits = defineEmits<TabsRootEmits>()\n\nconst forwarded = useForwardPropsEmits(props, emits)\n</script>\n\n<template>\n  <Tabs v-bind=\"forwarded\">\n    <TabsList class=\"grid w-full\" :class=\"`grid-cols-${tabs?.length}`\">\n      <TabsTrigger v-for=\"(tab, index) in tabs\" :key=\"`${index}__tab-trigger`\" :value=\"tab.value\">\n        {{ tab.label }}\n      </TabsTrigger>\n    </TabsList>\n    <TabsContent v-for=\"(tab, index) in tabs\" :key=\"`${index}__tab-content`\" :value=\"tab.value\">\n      <slot name=\"tab-content\" :tab=\"tab\">\n        <slot :name=\"`tab-content:${tab.value}`\" :tab=\"tab\">\n          <component :is=\"tab.component\" v-bind=\"tab.props\" v-on=\"tab.events\" />\n        </slot>\n      </slot>\n    </TabsContent>\n  </Tabs>\n</template>\n"
    },
    {
      "name": "TextareaWrapper.vue",
      "content": "<script setup lang=\"ts\">\nimport { useVModel } from '@vueuse/core'\nimport type { HTMLAttributes } from 'vue'\nimport { Textarea } from '@/lib/registry/default/ui/textarea'\nimport { FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/lib/registry/default/ui/form'\n\nconst props = defineProps<{\n  defaultValue?: string | number\n  modelValue?: string | number\n  class?: HTMLAttributes['class']\n  id?: string\n  name?: string\n  label?: string\n  required?: boolean\n  placeholder?: string\n  description?: string\n  disabled?: boolean\n  loading?: boolean\n  prefix?: string\n  suffix?: string\n}>()\n\nconst emits = defineEmits<{\n  (e: 'update:modelValue', payload: string | number): void\n}>()\n\nconst modelValue = useVModel(props, 'modelValue', emits, {\n  passive: true,\n  defaultValue: props.defaultValue,\n})\n</script>\n\n<template>\n  <FormField v-slot=\"slotProps\" :name=\"props.name || ''\">\n    <FormItem v-bind=\"$attrs\">\n      <FormLabel v-if=\"props.label\">\n        {{ props.label }}\n        <span v-if=\"props.required\" class=\"text-destructive\"> *</span>\n      </FormLabel>\n      <FormControl>\n        <Textarea\n          v-bind=\"slotProps\" :id=\"props.id\" v-model=\"modelValue\"\n          :placeholder=\"props.placeholder\" :disabled=\"props.disabled\" :loading=\"props.loading\" :class=\"props.class\"\n          :prefix=\"props.prefix\" :suffix=\"props.suffix\"\n        />\n      </FormControl>\n      <FormDescription v-if=\"props.description\">\n        {{ props.description }}\n      </FormDescription>\n      <FormMessage />\n    </FormItem>\n  </FormField>\n</template>\n"
    },
    {
      "name": "TooltipWrapper.vue",
      "content": "<script setup lang=\"ts\">\nimport { TooltipProvider, type TooltipProviderProps } from 'radix-vue'\n\nimport { Tooltip, TooltipContent, TooltipTrigger } from '@/lib/registry/default/ui/tooltip'\n\nexport interface TooltipProps extends TooltipProviderProps {\n  content: string\n  side?: 'top' | 'right' | 'bottom' | 'left'\n}\nconst props = defineProps<TooltipProps>()\n</script>\n\n<template>\n  <TooltipProvider v-bind=\"props\">\n    <Tooltip>\n      <TooltipTrigger as-child>\n        <slot />\n      </TooltipTrigger>\n      <TooltipContent :side=\"side\">\n        <slot name=\"content\" :content=\"content\">\n          <p>{{ content }}</p>\n        </slot>\n      </TooltipContent>\n    </Tooltip>\n  </TooltipProvider>\n</template>\n"
    },
    {
      "name": "index.ts",
      "content": "export { default as TooltipWrapper } from './TooltipWrapper.vue'\nexport { default as TextareaWrapper } from './TextareaWrapper.vue'\nexport { default as TabsWrapper } from './TabsWrapper.vue'\nexport { default as SheetWrapper } from './SheetWrapper.vue'\nexport { default as NumberFieldWrapper } from './NumberFieldWrapper.vue'\nexport { default as MenubarWrapper } from './MenubarWrapper.vue'\nexport { default as MenubarWrapperContent } from './MenubarWrapperContent.vue'\nexport { default as InputWrapper } from './InputWrapper.vue'\nexport { default as DropdownMenuWrapper } from './DropdownMenuWrapper.vue'\nexport { default as DrawerWrapper } from './DrawerWrapper.vue'\nexport { default as DialogWrapper } from './DialogWrapper.vue'\nexport { default as CardWrapper } from './CardWrapper.vue'\nexport { default as AvatarWrapper } from './AvatarWrapper.vue'\nexport { default as AlertDialogWrapper } from './AlertDialogWrapper.vue'\nexport { default as AlertWrapper } from './AlertWrapper.vue'\n"
    }
  ],
  "type": "components:ui"
}
